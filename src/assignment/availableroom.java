/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment;

import static assignment.client.myBookingData;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class availableroom extends javax.swing.JFrame {

    /**
     * Creates new form availableroom
     */
    public availableroom() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomTitle = new javax.swing.JLabel();
        roomStartdate = new com.toedter.calendar.JDateChooser();
        roomEnddate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        roomSearch = new javax.swing.JButton();
        roomBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        roomBook = new javax.swing.JButton();
        roomBookid = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        roomReset = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roomTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        roomTitle.setText("Room");
        getContentPane().add(roomTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, -1, -1));
        getContentPane().add(roomStartdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 150, -1));
        getContentPane().add(roomEnddate, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 140, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Searching Date From :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("To");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, -1, -1));

        roomSearch.setText("Search");
        roomSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSearchActionPerformed(evt);
            }
        });
        getContentPane().add(roomSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 70, -1, -1));

        roomBack.setText("Back");
        roomBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomBackActionPerformed(evt);
            }
        });
        getContentPane().add(roomBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        String[] COLUMN_NAMES = {"Room ID", "Room Level", "Room Size"};
        DefaultTableModel model = new DefaultTableModel(COLUMN_NAMES, 0);
        roomTable.setModel(model);
        try (RandomAccessFile raf = new RandomAccessFile(new File("Room.txt"), "r")) {

            String line;
            while ((line = raf.readLine()) != null) {
                String[] data = new String[3];
                data[0] = line.substring(9); // room id
                line = raf.readLine();
                data[1] = line.substring(12); // room level
                line = raf.readLine();
                data[2] = line.substring(11); // room size
                line = raf.readLine();

                model.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        jScrollPane2.setViewportView(roomTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 140, 920, 350));

        roomBook.setText("Book Now !");
        roomBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomBookActionPerformed(evt);
            }
        });
        getContentPane().add(roomBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 520, -1, -1));

        DefaultTableModel tableModel = (DefaultTableModel) roomTable.getModel();
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

        // Iterate over the table rows
        for (int row = 0; row < tableModel.getRowCount(); row++) {
            // Get the value from the desired column (assuming column 0 contains the desired values)
            String value = String.valueOf(tableModel.getValueAt(row, 0));

            // Add the value to the combo box model
            comboBoxModel.addElement(value);
        }
        roomBookid.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        roomBookid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomBookidActionPerformed(evt);
            }
        });
        getContentPane().add(roomBookid, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 520, 100, -1));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 610, -1, -1));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 460, -1, -1));

        roomReset.setText("Reset");
        roomReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomResetActionPerformed(evt);
            }
        });
        getContentPane().add(roomReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 70, -1, -1));
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 600, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
   
    private void roomBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomBackActionPerformed
        //sending back to menu
        menu a = new menu();
        a.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_roomBackActionPerformed

    private void roomBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomBookActionPerformed
    try {
        //retrieving the date data in the format of dd/MM/yyyy
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Date startDate = roomStartdate.getDate();
        Date endDate = roomEnddate.getDate();
        
        //getting data from mySearchingDate array in booking.java
        Date[] mySearchingDate = booking.mySearchingDate;
        mySearchingDate[0] = startDate;
        mySearchingDate[1] = endDate;
        
        //getting room id, room size, room level data    
        String roomid = String.valueOf(roomBookid.getSelectedItem());
        room obj1 = new room(roomid);
        String res = obj1.searchroomdata();
        
        
        if(res == "Success"){
            //send to bookingform page
            bookingform obj2 = new bookingform();
            obj2.setVisible(true);
            this.setVisible(false);
        }
        
        } catch (IOException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    
    }//GEN-LAST:event_roomBookActionPerformed

    private void roomSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSearchActionPerformed
        //get date and convert them in to dd/mm/yyyy format in string
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date firstDate = roomStartdate.getDate();
        Date secondDate = roomEnddate.getDate();
        String firstDateConversion = dateFormat.format(firstDate);
        String secondDateConversion = dateFormat.format(secondDate);

        //get room id to be removed into an array
        List<String> rowsToRemove = new ArrayList<>();
        
        //read lines from booking txt
        try (RandomAccessFile raf = new RandomAccessFile(new File("Booking.txt"), "r")) {
            String line;
            while ((line = raf.readLine()) != null) {
                String[] data = new String[13];
                data[0] = line.substring(9); //id
                line = raf.readLine();
                data[1] = line.substring(12); //level
                line = raf.readLine();
                data[2] = line.substring(11); //size
                line = raf.readLine();
                data[3] = line.substring(13); // ic
                line = raf.readLine();
                data[4] = line.substring(6); //name
                line = raf.readLine();
                data[5] = line.substring(7); //email
                line = raf.readLine();
                data[6] = line.substring(9); //contact
                line = raf.readLine();
                data[7] = line.substring(12); //start
                line = raf.readLine();
                data[8] = line.substring(10); //end
                line = raf.readLine();
                data[9] = line.substring(14); //day to stay
                line = raf.readLine();
                data[10] = line.substring(10); //checkin
                line = raf.readLine();
                data[11] = line.substring(11); //checkout
                line = raf.readLine();
                
                //converting data into date format
                Date startDate = dateFormat.parse(data[7]);
                Date endDate = dateFormat.parse(data[8]);
                String startDateConversion = dateFormat.format(startDate);
                String endDateConversion = dateFormat.format(endDate);
                
                //adding the row in jtable into an array where the start date and end date is matched with the searching column data
                if ((startDateConversion.equals(firstDateConversion) || startDateConversion.compareTo(firstDateConversion) >= 0)
                        && (endDateConversion.equals(secondDateConversion) || endDateConversion.compareTo(secondDateConversion) <= 0)) {
                    String roomId = String.valueOf(data[0]);
                    rowsToRemove.add(roomId);
                }
            }
            
            //change the table data with is matched via the id get from the rowsToRemove array
            DefaultTableModel model = (DefaultTableModel) roomTable.getModel();
            for (String roomId : rowsToRemove) {
                for (int i = 0; i < model.getRowCount(); i++) {
                    String roomIdInTable = String.valueOf(model.getValueAt(i, 0)); // Assuming the room ID is in the first column
                    if (roomIdInTable.equals(roomId)) {
                        model.removeRow(i);
                        
                    }
                }
            }
            
            //adding new value into combobox based on the jtable
            DefaultTableModel tableModel2 = (DefaultTableModel) roomTable.getModel();
            DefaultComboBoxModel<String> comboBoxModel2 = new DefaultComboBoxModel<>();
            for (int row = 0; row < tableModel2.getRowCount(); row++) {
                String value = String.valueOf(tableModel2.getValueAt(row, 0));
                // Add the value to the combo box model
                comboBoxModel2.addElement(value);
            }

            // Set the updated combo box model to the JComboBox
            roomBookid.setModel(comboBoxModel2);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_roomSearchActionPerformed

    private void roomResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomResetActionPerformed
        //resetting the date and jtable data
        roomStartdate.setDate(null);
        roomEnddate.setDate(null);
        
        String[] COLUMN_NAMES = {"Room ID", "Room Level", "Room Size"};
        DefaultTableModel model2 = new DefaultTableModel(COLUMN_NAMES, 0);
        roomTable.setModel(model2);
        try (RandomAccessFile raf = new RandomAccessFile(new File("Room.txt"), "r")) {

            String line;
            while ((line = raf.readLine()) != null) {
                String[] data = new String[3];
                data[0] = line.substring(9); // room id
                line = raf.readLine();
                data[1] = line.substring(12); // room level
                line = raf.readLine();
                data[2] = line.substring(11); // room size
                line = raf.readLine();

                model2.addRow(data);
            }
            
            DefaultTableModel tableModel3 = (DefaultTableModel) roomTable.getModel();
            DefaultComboBoxModel<String> comboBoxModel3 = new DefaultComboBoxModel<>();

            // Iterate over the table rows
            for (int row = 0; row < tableModel3.getRowCount(); row++) {
                // Get the value from the desired column (assuming column 0 contains the desired values)
                String value = String.valueOf(tableModel3.getValueAt(row, 0));

                // Add the value to the combo box model
                comboBoxModel3.addElement(value);
            }
            
            roomBookid.setModel(comboBoxModel3);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(availableroom.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_roomResetActionPerformed
    

    private void roomBookidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomBookidActionPerformed

    }//GEN-LAST:event_roomBookidActionPerformed
    // Method to update the combo box with values from the table model

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(availableroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(availableroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(availableroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(availableroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new availableroom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton roomBack;
    private javax.swing.JButton roomBook;
    private javax.swing.JComboBox<String> roomBookid;
    private com.toedter.calendar.JDateChooser roomEnddate;
    private javax.swing.JButton roomReset;
    private javax.swing.JButton roomSearch;
    private com.toedter.calendar.JDateChooser roomStartdate;
    private javax.swing.JTable roomTable;
    private javax.swing.JLabel roomTitle;
    // End of variables declaration//GEN-END:variables
}
